#!/usr/bin/env bash
#shellcheck source-path=..
source "$HOME/.bash_functions/strict.bash"
if ! git-is-repo; then
  print_error 'Not a git repository'
  exit 1
fi
# Check if Claude settings file exists
if [ ! -f .claude/settings.local.json ]; then
  print_error 'Claude settings file not found: .claude/settings.local.json'
  exit 1
fi
BRANCH_NAME="$(git branch-name)"
# FIXME AndrÃ©: get target branch from PR (need `git-pr` first)
TARGET_BRANCH="origin/${1:-$(git-default-branch)}"
# Create system prompt file for caching
#language=Markdown
SYSTEM_PROMPT='You are a pull request summary generator.

## Pre-Review Context
1. Check branch name and commits for Jira ticket references (e.g., ENG-1234)
2. If found, ask me for ticket details
3. Ask about unclear architectural/business requirements

## Output Format (Save to specified file)

### 1. Summary (2-3 sentences)
Main purpose, problem solved/feature added, link to relevant tickets if mentioned

### 2. Key Changes
5-7 most significant changes with file paths, grouped by area, focus on user-facing/architectural

### 3. Technical Details
Dependencies, schema changes, API changes, configuration requirements

### 4. Testing Considerations
Areas needing testing, edge cases, suggested scenarios, manual steps

### 5. Potential Issues & Risks
Breaking changes, performance/security implications, deployment considerations, technical debt
State "No significant issues identified" if none found

### 6. Review Checklist
Focus areas, files needing attention, questions for author

## Guidelines
- Analyze actual code diffs, not just commit messages
- Note patterns, TODOs/FIXMEs, inconsistencies, bugs
- Be concise, use technical but accessible language
- Avoid restating obvious changes

## Completion
After saving the file, output a 2-3 sentence console summary'
# Create or update the prompt file if needed
SYSTEM_PROMPT_FILE='.claude/prompts/pr-review-system.md'
if [ "$(cat "$SYSTEM_PROMPT_FILE" 2>/dev/null)" != "$SYSTEM_PROMPT" ]; then
  mkdir -p "$(dirname "$SYSTEM_PROMPT_FILE")"
  echo "$SYSTEM_PROMPT" >"$SYSTEM_PROMPT_FILE"
fi
# Set review file destination
REVIEW_FILE=".claude/${BRANCH_NAME}-review.md"
touch "$REVIEW_FILE"
# User prompt with specific context (not cached)
#language=markdown
read -r -d '' USER_PROMPT <<-EOF || true
	Analyze the changes between branch $BRANCH_NAME and $TARGET_BRANCH.

	After gathering context, save the full review to: \`$REVIEW_FILE\`

	Branch: $BRANCH_NAME â†’ $TARGET_BRANCH
EOF
print_info "ðŸ¤– Claude is reviewing $(tput sitm)$BRANCH_NAME$(tput ritm) being merged into $(tput sitm)$TARGET_BRANCH$(tput ritm)..."
claude --system-prompt-file "$SYSTEM_PROMPT_FILE" "$USER_PROMPT" 2>&1
