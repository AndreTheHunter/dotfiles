#!/usr/bin/env bash
#shellcheck source-path=..
source "$HOME/.bash_functions/strict.bash"
# Check if git repository
if ! git-is-repo; then
  print_error 'Not a git repository'
  exit 1
fi
# Check if Claude settings file exists
if [ ! -f .claude/settings.local.json ]; then
  print_error 'Claude settings file not found: .claude/settings.local.json'
  exit 1
fi
# Get staged changes
print_info '📝 Getting staged changes...'
DIFF_OUTPUT="$(git diff --cached)"
if [ -z "$DIFF_OUTPUT" ]; then
  print_error 'No staged changes found. Please stage your changes first with: git add <files>'
  exit 1
fi
# Get git status for context
STATUS_OUTPUT="$(git status)"
print_info '🤖 Generating commit message with Claude...'
# Define system prompt content
SYSTEM_PROMPT="Generate a Git commit message from the provided diff. Output ONLY plain text—no Markdown, code blocks, or explanations.

Format:
type(scope): summary (max 50 chars, imperative mood)

- Change description (what and why)
- Another change

Types: feat, fix, docs, style, refactor, perf, test, chore, ci, build

Example:
fix: correct timezone handling in reports

- Convert dates to UTC before storage
- Display in user's local timezone"
# Create or update the prompt file if needed
SYSTEM_PROMPT_FILE='.claude/prompts/commit-message-system.md'
if [ "$(cat "$SYSTEM_PROMPT_FILE" 2>/dev/null)" != "$SYSTEM_PROMPT" ]; then
  mkdir -p "$(dirname "$SYSTEM_PROMPT_FILE")"
  echo "$SYSTEM_PROMPT" >"$SYSTEM_PROMPT_FILE"
fi
# Short user prompt with actual data
USER_PROMPT="Git Status:
$STATUS_OUTPUT

Git Diff:
$DIFF_OUTPUT"
# Use cached system prompt
COMMIT_MESSAGE="$(claude --system-prompt-file "$SYSTEM_PROMPT_FILE" --print "$USER_PROMPT" 2>&1)"
if [ -z "$COMMIT_MESSAGE" ]; then
  print_error 'Failed to generate commit message'
  exit 1
fi
# Display the generated commit message
print_info '📋 Generated commit message:'
echo '──────────────────────────────────────────────────'
echo "$COMMIT_MESSAGE"
echo '──────────────────────────────────────────────────'
# Prompt user for confirmation
read -n 1 -p "$(print_success 'Proceed with this commit? (y/n): ')" REPLY
echo
if [[ "$REPLY" =~ ^[Yy]$ ]]; then
  # Commit with the generated message
  if git commit -m "$COMMIT_MESSAGE"; then
    print_success 'Successfully committed changes!'
  else
    print_error 'Failed to commit'
    exit 1
  fi
else
  print_warning 'Commit cancelled'
  exit 0
fi
