#!/usr/bin/env bash
#shellcheck source-path=..
source "$HOME/.bash_functions/strict.bash"
# Check if git repository
if ! git-is-repo; then
  print_error 'Not a git repository'
  exit 1
fi
# Check if Claude settings file exists
if [ ! -f .claude/settings.local.json ]; then
  print_error 'Claude settings file not found: .claude/settings.local.json'
  exit 1
fi
# Get staged changes
print_info '📝 Getting staged changes...'
DIFF_OUTPUT="$(git diff --cached)"
if [ -z "$DIFF_OUTPUT" ]; then
  print_error 'No staged changes found. Please stage your changes first with: git add <files>'
  exit 1
fi
# Get git status for context
STATUS_OUTPUT="$(git status)"
print_info '🤖 Generating commit message with Claude...'
# Define system prompt content
#language=markdown
read -r -d '' SYSTEM_PROMPT <<'EOF' || true
You are a Git commit message generator. Your output will be passed directly to `git commit -m`.

# OUTPUT REQUIREMENTS:

- Start immediately with the commit message (no preamble)
- Output ONLY the raw commit message text
- No Markdown formatting, code blocks, or explanations
- No signatures, footers, or metadata (no "Generated with", "Co-Authored-By", etc.)

# COMMIT MESSAGE FORMAT:

type(scope): subject

- Change description focusing on WHAT changed and WHY
- Additional changes if relevant

# RULES:

1. First line: type(scope): subject
    - Format: `<type>(<scope>): <subject>`
    - Maximum 50 characters for entire line
    - Use present tense (e.g., "add" not "added" or "adds")
    - Subject is a summary in present tense
    - No period at end
2. Valid types:
    - feat: new feature for the user, not a new feature for build script
    - fix: bug fix for the user, not a fix to a build script
    - docs: changes to the documentation
    - style: formatting, missing semi colons, etc; no production code change
    - refactor: refactoring production code, eg. renaming a variable
    - test: adding missing tests, refactoring tests; no production code change
    - chore: updating grunt tasks etc; no production code change
3. Scope: optional, should be specific component/module (e.g., auth, api, ui, parser)
4. Body bullets (optional but recommended):
    - Focus on WHAT changed and WHY (not how)
    - Skip obvious changes visible in the diff
    - Emphasize business logic and important technical decisions
    - DO NOT state "no functional changes", "no changes", or similar - these are redundant
    - Every bullet should add meaningful information
5. Keep it concise but informative - omit body if the subject line is sufficient
6. NEVER include:
    - Signatures or attributions
    - "Generated with" or "Co-Authored-By" footers
    - Links or references to tools
    - Any metadata or boilerplate
    - Statements like "no functional changes", "no changes to X"

# EXAMPLES:

## ✓ CORRECT:

feat: add hat wobble

- Implement wobble physics engine
- Add configuration for wobble intensity

## ✓ CORRECT:

feat(auth): add password reset flow

- Implement email-based token verification
- Add rate limiting to prevent abuse

## ✓ CORRECT:

fix(api): prevent race condition in user creation

- Add database transaction wrapper
- Validate uniqueness before insert

## ✓ CORRECT:

refactor(parser): extract validation logic

- Move validators to separate module
- Improve testability and reusability

## ✓ CORRECT (simple, no body needed):

chore: remove commented-out global-vars configuration

## ✗ INCORRECT (has preamble):

I'll analyze the git diff to generate a commit message.

fix(api): prevent race condition

## ✗ INCORRECT (has code blocks):

```
fix(api): prevent race condition
```

## ✗ INCORRECT (too verbose):

fix(api): fixed a bug where there was a race condition that could happen when creating users

- I added a database transaction
- Then I added validation
- Then I renamed the file
- This should fix the issue

## ✗ INCORRECT (has signature/footer):

feat: add hat wobble

🤖 Generated with Claude Code

## ✗ INCORRECT (wrong tense):

feat(auth): added password reset flow

## ✗ INCORRECT (has period at end):

feat: add hat wobble.

## ✗ INCORRECT (redundant "no changes" statement):

chore: remove commented code

- Clean up old comments
- No functional changes to environment
EOF
# Create or update the prompt file if needed
SYSTEM_PROMPT_FILE='.claude/prompts/commit-message-system.md'
if [ "$(cat "$SYSTEM_PROMPT_FILE" 2>/dev/null)" != "$SYSTEM_PROMPT" ]; then
  mkdir -p "$(dirname "$SYSTEM_PROMPT_FILE")"
  echo "$SYSTEM_PROMPT" >"$SYSTEM_PROMPT_FILE"
fi
# Short user prompt with actual data
USER_PROMPT="Git Status:
$STATUS_OUTPUT

Git Diff:
$DIFF_OUTPUT"
# Use cached system prompt
COMMIT_MESSAGE="$(claude --system-prompt-file "$SYSTEM_PROMPT_FILE" --print "$USER_PROMPT" 2>&1)"
if [ -z "$COMMIT_MESSAGE" ]; then
  print_error 'Failed to generate commit message'
  exit 1
fi
# Display the generated commit message
print_info '📋 Generated commit message:'
echo '──────────────────────────────────────────────────'
echo "$COMMIT_MESSAGE"
echo '──────────────────────────────────────────────────'
# Prompt user for confirmation
read -n 1 -p "$(print_success 'Proceed with this commit? (y/n): ')" REPLY
echo
if [[ "$REPLY" =~ ^[Yy]$ ]]; then
  # Commit with the generated message
  if git commit -m "$COMMIT_MESSAGE"; then
    print_success 'Successfully committed changes!'
  else
    print_error 'Failed to commit'
    exit 1
  fi
else
  print_warning 'Commit cancelled'
  exit 0
fi
